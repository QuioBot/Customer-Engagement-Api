# Your workflow name.
name: Deploy to heroku.

# Run workflow on every push to main branch.
on:
  push:
    branches: [main]

# Your workflows jobs.
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # Check-out your repository.
      - name: Checkout
        uses: actions/checkout@v2


### ⬇ IMPORTANT PART ⬇ ###

      - name: Build, Push and Release a Docker container to Heroku. # Your custom step name
        uses: gonuit/heroku-docker-deploy@v1.3.3 # GitHub action name (leave it as it is).
        with:
          # Below you must provide variables for your Heroku app.

          # The email address associated with your Heroku account.
          # If you don't want to use repository secrets (which is recommended) you can do:
          # email: my.email@example.com
          email: ${{ secrets.HEROKU_EMAIL }}
          
          # Heroku API key associated with provided user's email.
          # Api Key is available under your Heroku account settings.
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          
          # Name of the heroku application to which the build is to be sent.
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}

          # (Optional, default: "./")
          # Dockerfile directory.
          # For example, if you have a Dockerfile in the root of your project, leave it as follows:
          dockerfile_directory: ./

          # (Optional, default: "Dockerfile")
          # Dockerfile name.
          dockerfile_name: Dockerfile

          # (Optional, default: "")
          # Additional options of docker build command.
          docker_options: "--no-cache"

          # (Optional, default: "web")
          # Select the process type for which you want the docker container to be uploaded.
          # By default, this argument is set to "web".
          # For more information look at https://devcenter.heroku.com/articles/process-model
          process_type: web



# name: Build Docker Container & Push to DO Registry

# on:
#   workflow_call:
#   workflow_dispatch:
#   push:
#     branches: [main]
#   pull_request:
#     branches: [main]

# jobs:
#   build:
#     runs-on: ubuntu-latest
#     env:
#       CLUSTER_NAME: fastapi-k8s
#     steps:
#       - uses: actions/checkout@v2
#       - name: docker login
#         env:
#           DOCKER_USER: ${{secrets.DOCKER_USER}}
#           DOCKER_PASSWORD: ${{secrets.DOCKER_PASSWORD}}
#         run: |
#           docker login -u $DOCKER_USER -p $DOCKER_PASSWORD 
#       - name: docker pull rust
#         run: docker pull rust
        
#       - name: docker run rust
#         run: docker run rust

#       - name: Build the Docker image
#         run: docker build . --file Dockerfile --tag elghibaomar/customer-satisfaction-api:latest 
          
      
#       - name: Docker Push
#         run: docker push elghibaomar/customer-satisfaction-api:latest




      # - name: Checkout code
      #   uses: actions/checkout@v2
      # - name: docker login
      # - name: Login to DO Container Registry with short-lived creds
      #   run: doctl registry login --expiry-seconds 1200
      # - name: Build container image
      #   run: |
      #     docker build -f Dockerfile \
      #       -t registry.digitalocean.com/om-k8s/vuejs-k8s-web:latest \
      #       -t registry.digitalocean.com/om-k8s/vuejs-k8s-web:${GITHUB_SHA::7}-${GITHUB_RUN_ID::5} \
      #       .
      # - name: Push image
      #   run: |
      #     docker push registry.digitalocean.com/om-k8s/vuejs-k8s-web --all-tags
      # - name: K8s cluster kubeconfig file with/ short-lived creds
      #   run: |
      #     doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ env.CLUSTER_NAME }}

      # - name: Deployment image
      #   run: |
      #     kubectl apply -f k8s/apps/vuejs-k8s-web.yaml  
      # - name: Update Deployment image
      #   run: |
      #     kubectl set image deployment/vuejs-k8s-web-deployment vuejs-k8s-web=registry.digitalocean.com/om-k8s/vuejs-k8s-web:${GITHUB_SHA::7}-${GITHUB_RUN_ID::5}
      # - name: Wait for rollout to finish
      #   run: |
      #     kubectl rollout status deployment/vuejs-k8s-web-deployment





      